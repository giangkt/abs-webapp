buildscript {
	apply from: "gradle/adk.gradle"
	dependencies {
		classpath adkPlugins()
	}
}

apply plugin: 'axelor-app'

def modules = new File('modules/abs').listFiles().findAll { dir ->
	new File(dir, 'build.gradle').exists()
}

def studioModules = new File('modules/axelor-process-studio').listFiles().findAll { dir ->
	new File(dir, 'build.gradle').exists() 
}

def otherModules = new File('modules').listFiles().findAll { dir ->
	new File(dir, 'build.gradle').exists()
}

studioModules.addAll(otherModules);

modules.addAll(studioModules)



def enModules = new File('modules/abs').listFiles().findAll { dir ->
  new File(dir, 'build.gradle').exists() && !dir.name.endsWith('-demo-fr') && !dir.name.endsWith('-l10n-fr')
}

enModules.addAll(studioModules)

def frModules = new File('modules/abs').listFiles().findAll { dir ->
	new File(dir, 'build.gradle').exists() && !dir.name.endsWith('-demo-en') && !dir.name.endsWith('-l10n-en')
}

frModules.addAll(studioModules)

def installedModules = project.hasProperty('lang') && project.getProperty('lang') == 'fr' ? frModules : enModules

application {

	name "axelor-erp"
	title "Axelor :: ERP"
	
	version "4.0.0"
	
	// ADK version required
	adkVersion "~4.0.0"


	// depends on all modules
	modules.each { dir ->
		module "modules:$dir.name"
	}
	
	// install all modules
	installedModules.each { dir ->
			install "$dir.name"
	}
	
}

allprojects {
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
}

tomcat {
	httpPort = project.properties.get("http.port", 8080) as Integer
	stopPort = 9451
}

task("dataImport", type: JavaExec) {
	main = "com.axelor.apps.erp.Main"
	classpath = sourceSets.main.runtimeClasspath
	if(System.getProperty("exec.args") != null) {
		args System.getProperty("exec.args").split()
	}
}

build.doLast{
	archiveReports.execute()
	archiveImages.execute()
}

task archiveReports(type: Zip){
	from 'modules/abs'
    include '*/src/main/resources/reports/*'
	classifier 'reports'
	eachFile { fileCopyDetails ->
		fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/reports/", '')
	}
	includeEmptyDirs = false
	destinationDir = new File("$buildDir/libs")
}

task archiveImages(type: Zip){
	from 'modules/abs'
    include '*/src/main/resources/data-demo/img/**'
	include '*/src/main/resources/data-init/img/**'
	classifier 'img'
	eachFile { fileCopyDetails ->
		fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/data-demo/img/", '').replaceAll(".*/src/main/resources/data-init/img/", "")
	}
	destinationDir = new File("$buildDir/libs")
	includeEmptyDirs = false
}
